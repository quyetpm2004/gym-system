import React, { useState, useEffect } from 'react';
import { getActiveMembership, getMembershipHistory, registerMembership } from '../../services/membershipApi';
import { getAllPackages } from '../../services/api';
import authService from '../../services/authService';
import { Badge, Button, Card, Col, Row, Modal, Alert, ProgressBar, Spinner } from 'react-bootstrap';
import { FaRunning, FaHistory, FaShoppingCart } from 'react-icons/fa';

const GymMembership = () => {
  const user = authService.getCurrentUser();
  const [loading, setLoading] = useState(true);
  const [activeMembership, setActiveMembership] = useState([]);
  const [availablePackages, setAvailablePackages] = useState([]);
  const [history, setHistory] = useState([]);
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [registering, setRegistering] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState(false);
  const [error, setError] = useState(null);

  // H√†m load d·ªØ li·ªáu ri√™ng bi·ªát ƒë·ªÉ c√≥ th·ªÉ g·ªçi l·∫°i nhi·ªÅu l·∫ßn
  const loadMembershipData = async () => {
    if (!user || !user._id) return;
    
    try {
      const [activeRes, historyRes] = await Promise.all([
        getActiveMembership(user._id),
        getMembershipHistory(user._id)
      ]);
      
      setActiveMembership(activeRes?.memberships || null);
      setHistory(historyRes?.memberships || []);
      setError(null);
    } catch (error) {
      console.error('L·ªói khi t·∫£i d·ªØ li·ªáu membership:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // Load d·ªØ li·ªáu ban ƒë·∫ßu
  useEffect(() => {
    if (!user || !user._id) return;

    const loadInitialData = async () => {
      setLoading(true);
      try {
        const [packagesRes, activeRes, historyRes] = await Promise.all([
          getAllPackages(),
          getActiveMembership(user._id),
          getMembershipHistory(user._id)
        ]);
        
        setAvailablePackages(packagesRes?.packages || []);
        setActiveMembership(activeRes?.memberships?.[0] || null);
        setHistory(historyRes?.memberships || []);
        setError(null);
      } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu:', error);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng t·∫£i l·∫°i trang.');
      } finally {
        setLoading(false);
      }
    };

    loadInitialData();
  }, [user?._id]);

  const handleRegister = (pkg) => {
    setSelectedPackage(pkg);
    setShowModal(true);
    setRegistrationSuccess(false);
    setError(null);
  };

  const confirmRegister = async () => {
    if (!user || !selectedPackage) return;
    
    setRegistering(true);
    setError(null);
    
    try {
      // ƒêƒÉng k√Ω membership
      const response = await registerMembership({
        userId: user._id,
        packageId: selectedPackage._id,
        paymentStatus: 'paid',
      });

      console.log('ƒêƒÉng k√Ω th√†nh c√¥ng:', response);

      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c commit
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Th·ª≠ load l·∫°i d·ªØ li·ªáu v·ªõi retry logic
      let retryCount = 0;
      const maxRetries = 3;
      
      while (retryCount < maxRetries) {
        try {
          await loadMembershipData();
          
          // Ki·ªÉm tra xem c√≥ membership m·ªõi kh√¥ng
          const newActiveRes = await getActiveMembership(user._id);
          const newActiveMembership = newActiveRes?.memberships?.[0];
          
          if (newActiveMembership && newActiveMembership.package?._id === selectedPackage._id) {
            // T√¨m th·∫•y membership m·ªõi, c·∫≠p nh·∫≠t state
            setActiveMembership(newActiveMembership);
            setRegistrationSuccess(true);
            break;
          }
          
          retryCount++;
          if (retryCount < maxRetries) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        } catch (retryError) {
          console.error(`L·∫ßn th·ª≠ ${retryCount + 1} th·∫•t b·∫°i:`, retryError);
          retryCount++;
          if (retryCount < maxRetries) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }

      if (retryCount >= maxRetries) {
        setError('ƒêƒÉng k√Ω th√†nh c√¥ng nh∆∞ng d·ªØ li·ªáu ch∆∞a c·∫≠p nh·∫≠t. Vui l√≤ng t·∫£i l·∫°i trang.');
      }

    } catch (error) {
      console.error('L·ªói khi ƒëƒÉng k√Ω:', error);
      setError('C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setRegistering(false);
    }
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setRegistrationSuccess(false);
    setError(null);
    setSelectedPackage(null);
  };

  // H√†m ƒë·ªÉ force refresh d·ªØ li·ªáu
  const handleRefreshData = async () => {
    setLoading(true);
    await loadMembershipData();
    setLoading(false);
  };

  if (loading) {
    return (
      <div className="bg-dark py-5 text-center">
        <Spinner animation="border" variant="light" />
        <p className="text-light mt-3">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    );
  }

  return (
    <div className="bg-dark py-5">
      <div className="container">
        {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
        {error && (
          <Alert variant="danger" className="mb-4">
            {error}
            <Button variant="outline-danger" size="sm" className="ms-2" onClick={handleRefreshData}>
              T·∫£i l·∫°i
            </Button>
          </Alert>
        )}

        {/* Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng */}
        {registrationSuccess && (
          <Alert variant="success" className="mb-4">
            üéâ ƒêƒÉng k√Ω g√≥i t·∫≠p th√†nh c√¥ng! G√≥i t·∫≠p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
          </Alert>
        )}

        {/* G√ìI HI·ªÜN T·∫†I */}
        <Row className="mb-5">
          <Col md={12}>
            <div className="d-flex justify-content-between align-items-center mb-3">
              <h3 className="text-teal mb-0">
                <FaRunning className="me-2" /> G√≥i T·∫≠p C·ªßa B·∫°n
              </h3>
              <Button variant="outline-light" size="sm" onClick={handleRefreshData}>
                L√†m m·ªõi
              </Button>
            </div>
            
            {activeMembership && activeMembership.length > 0 ? (
              activeMembership.map((membership) => (
                <Card key={membership._id} className="p-4 bg-dark text-light border border-teal rounded-4 shadow mb-3">
                  <h5>G√≥i: {membership.package?.name}</h5>
                  <p><strong>HLV: </strong>{membership.coach?.name || 'Ch∆∞a c√≥'}</p>
                  <p><strong>B·∫Øt ƒë·∫ßu:</strong> {new Date(membership.startDate).toLocaleDateString('vi-VN')}</p>
                  <p><strong>K·∫øt th√∫c:</strong> {new Date(membership.endDate).toLocaleDateString('vi-VN')}</p>
                  <p><strong>C√≤n l·∫°i: </strong>{membership.sessionsRemaining} bu·ªïi</p>
                  <ProgressBar 
                    now={membership.sessionsRemaining / membership.package.sessionLimit * 100}
                    variant="teal" 
                    className="rounded-pill" 
                    style={{ height: 8 }} 
                  />
                </Card>
              ))
            ) : (
              <Alert variant="warning">
                B·∫°n ch∆∞a ƒëƒÉng k√Ω g√≥i t·∫≠p n√†o!
                <Button variant="outline-warning" size="sm" className="ms-2" onClick={handleRefreshData}>
                  Ki·ªÉm tra l·∫°i
                </Button>
              </Alert>
            )}
          </Col>
        </Row>

        {/* DANH S√ÅCH G√ìI ƒêƒÇNG K√ù */}
        <Row className="mb-5">
          <Col md={12}>
            <h3 className="text-coral mb-3"><FaShoppingCart className="me-2" /> C√°c G√≥i T·∫≠p Hi·ªán C√≥</h3>
            <Row>
              {availablePackages.map((pkg) => (
                <Col md={3} key={pkg._id} className="mb-4">
                  <Card className="p-3 bg-dark text-light border rounded-4 shadow-lg h-100">
                    <h5 className="text-center">{pkg.name}</h5>
                    <p><strong>Th·ªùi h·∫°n: </strong>{pkg.durationInDays} ng√†y</p>
                    <p><strong>Bu·ªïi t·∫≠p: </strong>{pkg.sessionLimit}</p>
                    <p><strong>HLV ri√™ng: </strong>{pkg.withTrainer ? 'C√≥' : 'Kh√¥ng'}</p>
                    <h5 className="text-coral text-center mt-3">{pkg.price.toLocaleString()} VNƒê</h5>
                    <Button 
                      variant="coral" 
                      className="mt-3 w-100 rounded-pill"
                      onClick={() => handleRegister(pkg)}
                      disabled={registering}
                    >
                      ƒêƒÉng k√Ω
                    </Button>
                  </Card>
                </Col>
              ))}
            </Row>
          </Col>
        </Row>

        {/* L·ªäCH S·ª¨ ƒêƒÇNG K√ù */}
        <Row>
          <Col md={12}>
            <h3 className="text-teal mb-3"><FaHistory className="me-2" /> L·ªãch S·ª≠ ƒêƒÉng K√Ω</h3>
            {history.length === 0 ? (
              <Alert variant="secondary">Ch∆∞a c√≥ l·ªãch s·ª≠ ƒëƒÉng k√Ω</Alert>
            ) : (
              <div className="d-flex flex-column gap-3">
                {history.map((item) => (
                  <Card key={item._id} className="p-3 bg-dark text-light border rounded-4 shadow-sm">
                    <div><strong>G√≥i: </strong>{item.package?.name}</div>
                    <div><strong>Ng√†y mua: </strong>{new Date(item.createdAt).toLocaleDateString('vi-VN')}</div>
                    <div><strong>Tr·∫°ng th√°i: </strong>{item.paymentStatus === 'paid' ? (
                      <Badge bg="success">ƒê√£ thanh to√°n</Badge>) : (
                      <Badge bg="warning">Ch∆∞a thanh to√°n</Badge>)}
                    </div>
                  </Card>
                ))}
              </div>
            )}
          </Col>
        </Row>
      </div>

      {/* MODAL THANH TO√ÅN V·ªöI QR */}
      <Modal show={showModal} onHide={handleCloseModal} centered>
        <Modal.Header closeButton className="bg-teal">
          <Modal.Title>Thanh To√°n G√≥i T·∫≠p</Modal.Title>
        </Modal.Header>
        <Modal.Body className="bg-dark text-light">
          {selectedPackage && (
            <>
              {registrationSuccess && (
                <Alert variant="success" className="mb-3">
                  üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! G√≥i t·∫≠p ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.
                </Alert>
              )}
              
              {error && (
                <Alert variant="danger" className="mb-3">
                  {error}
                </Alert>
              )}

              <p>B·∫°n ƒëang ƒëƒÉng k√Ω: <strong>{selectedPackage.name}</strong></p>
              <p>Gi√°: <strong>{selectedPackage.price.toLocaleString()} VNƒê</strong></p>
              <p>Th·ªùi h·∫°n: {selectedPackage.durationInDays} ng√†y / {selectedPackage.sessionLimit} bu·ªïi</p>

              <div className="text-center my-3 bg-light p-3 rounded-4">
                <h6>Qu√©t m√£ QR ƒë·ªÉ thanh to√°n:</h6>
                <img
                  src="/images/qrcode.svg"
                  alt="QR Code"
                  style={{ borderRadius: 12, border: '3px solid #00cc99' }}
                />
              </div>

              <Alert variant="info" className="mt-3">
                Sau khi ƒë√£ qu√©t QR & thanh to√°n xong, h√£y nh·∫•n "T√¥i ƒë√£ thanh to√°n" b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.
              </Alert>
            </>
          )}
        </Modal.Body>
        <Modal.Footer className="bg-dark">
          <Button variant="outline-light" onClick={handleCloseModal}>
            {registrationSuccess ? 'ƒê√≥ng' : 'Hu·ª∑'}
          </Button>
          {!registrationSuccess && (
            <Button variant="coral" onClick={confirmRegister} disabled={registering}>
              {registering ? (
                <>
                  <Spinner animation="border" size="sm" className="me-2" />
                  ƒêang x·ª≠ l√Ω...
                </>
              ) : (
                'T√¥i ƒë√£ thanh to√°n'
              )}
            </Button>
          )}
        </Modal.Footer>
      </Modal>

      <style>{`
        .bg-dark { background-color: #1a1a1a !important; }
        .text-teal { color: #00cc99 !important; }
        .text-coral { color: #ff6f61 !important; }
        .btn-coral { background-color: #ff6f61 !important; border: none !important; }
        .btn-coral:hover { background-color: #e65a50 !important; }
        .border-teal { border-color: #00cc99 !important; }
        .progress-bar.bg-teal { background-color: #00cc99 !important; }
      `}</style>
    </div>
  );
};

export default GymMembership;